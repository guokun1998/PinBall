import java.awt.Frame;
import java.util.Random;

import javax.swing.Timer;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Panel;
import java.awt.TextArea;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;


public class PinBall {
	private final int TABLE_WIDTH = 300;
	private final int TABLE_HEIGHT = 400;
	private final int RACKET_Y = 340;
	private final int RACKET_HEIGHT = 20;
	private final int RACKET_WIDTH = 60;
	private final int BALL_SIZE = 16;
	private Frame f = new Frame("弹球游戏");
	Random rand = new Random();
	private int ySpeed = 12;
	private double xyRate  = rand.nextDouble() - 0.5;
	private int xSpeed = (int)(ySpeed * xyRate * 2);
	private int ballX = rand.nextInt(200) + 20;
	private int ballY = rand.nextInt(10) + 20;
	private int racketX = 150;
	private MyPanel tableArea = new MyPanel();
	Timer timer;
	int score = 0;
	private boolean isLose = false;
	private boolean isFirst = true;
	
	public void init() {
		tableArea.setPreferredSize(new Dimension(TABLE_WIDTH,TABLE_HEIGHT));
		f.add(tableArea);
		TextArea TA = new TextArea(0,10);
		/*TA.append("按空格开始/暂停，方向键左右移动滑块");
		tableArea.add(TA);*/
		KeyAdapter keyProcessor = new KeyAdapter() {
			public void keyPressed(KeyEvent ke) {
				if(ke.getKeyCode() == KeyEvent.VK_LEFT) {
					if(racketX > 0)
						racketX -= 10;
				}
				if(ke.getKeyCode() == KeyEvent.VK_RIGHT) {
					if(racketX < TABLE_WIDTH - RACKET_WIDTH)
						racketX += 10;
				}
				if(ke.getKeyCode() == KeyEvent.VK_SPACE) {
					if(timer.isRunning())
						timer.stop();
					else
						timer.start();
				}
				/*if(ke.getKeyCode() == KeyEvent.VK_TAB) {
						timer.restart();
				}
				if(ke.getKeyCode() == KeyEvent.VK_PLUS) {
					ySpeed++;
				}
				if(ke.getKeyCode() == KeyEvent.VK_MINUS) {
					ySpeed--;
				}*/
			}
		};
		f.addKeyListener(keyProcessor);
		f.addWindowListener(new MyWindowListener());
		tableArea.addKeyListener(keyProcessor);
		ActionListener taskPerformer = evt ->{
			
			if(ballX <= 0 || ballX >= TABLE_WIDTH - BALL_SIZE) {
				xSpeed = -xSpeed;
			}
			if(ballY >= RACKET_Y - BALL_SIZE && (ballX < racketX |ballX > racketX + RACKET_WIDTH)) {
				timer.stop();
				isLose = true;
				tableArea.repaint();
			}
			else if(ballY <= 0 || (ballY >= RACKET_Y - BALL_SIZE && ballX > racketX && ballX <= racketX + RACKET_WIDTH)) {
				ySpeed = -ySpeed;
				score++;
			}
			ballX += xSpeed;
			ballY += ySpeed;
			
			tableArea.repaint();
		};
		timer = new Timer(100,taskPerformer);
		//timer.start();
		f.pack();
		f.setVisible(true);
	}
	class MyWindowListener implements WindowListener{

		@Override
		public void windowActivated(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowClosed(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowClosing(WindowEvent arg0) {
			// TODO Auto-generated method stub
			System.exit(0);
		}

		@Override
		public void windowDeactivated(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowDeiconified(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowIconified(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void windowOpened(WindowEvent arg0) {
			// TODO Auto-generated method stub
			
		}
		
	}
	public static void main(String[] args) {
		new PinBall().init();
	}
	class MyPanel extends Panel{
		
		public void paint(Graphics   g) {
			//g.drawString("按空格开始/暂停，方向键左右移动滑块", 0, 10);
			if(isFirst) {
				g.setFont(new Font("Times",Font.BOLD,20));
				g.drawString("按空格开始/暂停", 20, 100);
				g.drawString("方向键左右移动滑块", 0, 200);
				g.drawString("准备好了吗？按空格开始！", 0, 300);
				isFirst = false;
			}
			else {
				if(isLose) {
					
					g.setColor(new Color(255,0,0));
					g.setFont(new Font("Times",Font.BOLD,20));
					g.drawString("游戏已结束！", 50, 100);
					g.drawString("得分："+ score, 50, 150);
					//g.drawString("速度："+ ySpeed, 50, 170);
					//g.drawString("按空格开始/暂停", 20, 200);
					//g.drawString("方向键左右移动滑块", 0, 300);
				}
				else {
					g.setColor(new Color(240,240,80));
					g.fillOval(ballX, ballY, BALL_SIZE, BALL_SIZE);
					g.setColor(new Color(80,80,200));
					g.fillRect(racketX, RACKET_Y, RACKET_WIDTH, RACKET_HEIGHT);
				}
			}
		}
	}
	class MyCanvas extends Canvas {
		public void paint(Graphics   g) {
			g.drawString("按空格开始/暂停，方向键左右移动滑块", 0, 10);
			if(isLose) {
				g.setColor(new Color(255,0,0));
				g.setFont(new Font("Times",Font.BOLD,30));
				g.drawString("游戏已结束！", 50, 200);
			}
			else {
				g.setColor(new Color(240,240,80));
				g.fillOval(ballX, ballY, BALL_SIZE, BALL_SIZE);
				g.setColor(new Color(80,80,200));
				g.fillRect(racketX, RACKET_Y, RACKET_WIDTH, RACKET_HEIGHT);
			}
		}
	}
}
